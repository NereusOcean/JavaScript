{"ast":null,"code":"var _jsxFileName = \"D:\\\\WSReact\\\\react1\\\\src\\\\Tech\\\\PrivateRoute.js\";\nimport React from \"react\";\nimport { withAuth } from \"./UserContext\";\nimport { Link, Redirect, Route } from 'react-router-dom';\nimport App from \"../App\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const PrivateRoute = withAuth(_c = ({\n  component: RouteComponent,\n  isAuthorized,\n  ...rest\n}) => /*#__PURE__*/_jsxDEV(Route, { ...rest,\n  render: routerProps => isAuthorized ? /*#__PURE__*/_jsxDEV(RouteComponent, { ...routerProps\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 24\n  }, this) : /*#__PURE__*/_jsxDEV(Redirect, {\n    to: \"/Login\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 61\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 7,\n  columnNumber: 5\n}, this));\n_c2 = PrivateRoute;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"PrivateRoute$withAuth\");\n$RefreshReg$(_c2, \"PrivateRoute\");","map":{"version":3,"sources":["D:/WSReact/react1/src/Tech/PrivateRoute.js"],"names":["React","withAuth","Link","Redirect","Route","App","PrivateRoute","component","RouteComponent","isAuthorized","rest","routerProps"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,QAAR,QAAuB,eAAvB;AACA,SAAQC,IAAR,EAAcC,QAAd,EAAwBC,KAAxB,QAAoC,kBAApC;AACA,OAAOC,GAAP,MAAgB,QAAhB;;AAEA,OAAO,MAAMC,YAAY,GAAGL,QAAQ,MAAC,CAAC;AAACM,EAAAA,SAAS,EAAEC,cAAZ;AAA4BC,EAAAA,YAA5B;AAA0C,KAAGC;AAA7C,CAAD,kBACjC,QAAC,KAAD,OAAUA,IAAV;AAAgB,EAAA,MAAM,EAAEC,WAAW,IAC/BF,YAAY,gBAAG,QAAC,cAAD,OAAoBE;AAApB;AAAA;AAAA;AAAA;AAAA,UAAH,gBAAwC,QAAC,QAAD;AAAU,IAAA,EAAE,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA;AADxD;AAAA;AAAA;AAAA;AAAA,QADgC,CAA7B;MAAML,Y","sourcesContent":["import React from \"react\";\r\nimport {withAuth} from \"./UserContext\";\r\nimport {Link, Redirect, Route} from 'react-router-dom';\r\nimport App from \"../App\";\r\n\r\nexport const PrivateRoute = withAuth(({component: RouteComponent, isAuthorized, ...rest}) => (\r\n    <Route{...rest} render={routerProps => (\r\n        isAuthorized ? <RouteComponent {...routerProps}/> : <Redirect to='/Login'/>\r\n    )}/>\r\n))"]},"metadata":{},"sourceType":"module"}