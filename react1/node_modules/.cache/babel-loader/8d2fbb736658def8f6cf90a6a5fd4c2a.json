{"ast":null,"code":"var _jsxFileName = \"D:\\\\WSReact\\\\react1\\\\src\\\\Tech\\\\UserContext.js\",\n    _s = $RefreshSig$();\n\nimport * as React from 'react';\nimport { FullPageSpinner } from '../components/lib';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/React.createContext();\n\nfunction AuthProvider(props) {\n  // code for pre-loading the user's information if we have their token in\n  // localStorage goes here\n  // ðŸš¨ this is the important bit.\n  // Normally your provider components render the context provider with a value.\n  // But we post-pone rendering any of the children until after we've determined\n  // whether or not we have a user token and if we do, then we render a spinner\n  // while we go retrieve that user's information.\n  if (weAreStillWaitingToGetTheUserData) {\n    return /*#__PURE__*/_jsxDEV(FullPageSpinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 16\n    }, this);\n  }\n\n  const login = () => {}; // make a login request\n\n\n  const register = () => {}; // register the user\n\n\n  const logout = () => {}; // clear the token in localStorage and the user data\n  // note, I'm not bothering to optimize this `value` with React.useMemo here\n  // because this is the top-most component rendered in our app and it will very\n  // rarely re-render/cause a performance problem.\n\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      data,\n      login,\n      logout,\n      register\n    },\n    ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 9\n  }, this);\n}\n\n_c = AuthProvider;\n\nconst useAuth = () => {\n  _s();\n\n  return React.useContext(AuthContext);\n};\n\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport { AuthProvider, useAuth }; // the UserProvider in user-context.js is basically:\n// const UserProvider = props => (\n//   <UserContext.Provider value={useAuth().data.user} {...props} />\n// )\n// and the useUser hook is basically this:\n// const useUser = () => React.useContext(UserContext)\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"sources":["D:/WSReact/react1/src/Tech/UserContext.js"],"names":["React","FullPageSpinner","AuthContext","createContext","AuthProvider","props","weAreStillWaitingToGetTheUserData","login","register","logout","data","useAuth","useContext"],"mappings":";;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAAQC,eAAR,QAA8B,mBAA9B;;AAEA,MAAMC,WAAW,gBAAGF,KAAK,CAACG,aAAN,EAApB;;AACA,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAIC,iCAAJ,EAAuC;AACnC,wBAAO,QAAC,eAAD;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;;AACD,QAAMC,KAAK,GAAG,MAAM,CAAE,CAAtB,CAXyB,CAWF;;;AACvB,QAAMC,QAAQ,GAAG,MAAM,CAAE,CAAzB,CAZyB,CAYC;;;AAC1B,QAAMC,MAAM,GAAG,MAAM,CAAE,CAAvB,CAbyB,CAaD;AACxB;AACA;AACA;;;AACA,sBACI,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAACC,MAAAA,IAAD;AAAOH,MAAAA,KAAP;AAAcE,MAAAA,MAAd;AAAsBD,MAAAA;AAAtB,KAA7B;AAAA,OAAkEH;AAAlE;AAAA;AAAA;AAAA;AAAA,UADJ;AAGH;;KApBQD,Y;;AAqBT,MAAMO,OAAO,GAAG;AAAA;;AAAA,SAAMX,KAAK,CAACY,UAAN,CAAiBV,WAAjB,CAAN;AAAA,CAAhB;;GAAMS,O;;AACN,SAAQP,YAAR,EAAsBO,OAAtB,G,CACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import * as React from 'react'\r\nimport {FullPageSpinner} from '../components/lib'\r\n\r\nconst AuthContext = React.createContext()\r\nfunction AuthProvider(props) {\r\n    // code for pre-loading the user's information if we have their token in\r\n    // localStorage goes here\r\n    // ðŸš¨ this is the important bit.\r\n    // Normally your provider components render the context provider with a value.\r\n    // But we post-pone rendering any of the children until after we've determined\r\n    // whether or not we have a user token and if we do, then we render a spinner\r\n    // while we go retrieve that user's information.\r\n    if (weAreStillWaitingToGetTheUserData) {\r\n        return <FullPageSpinner />\r\n    }\r\n    const login = () => {} // make a login request\r\n    const register = () => {} // register the user\r\n    const logout = () => {} // clear the token in localStorage and the user data\r\n    // note, I'm not bothering to optimize this `value` with React.useMemo here\r\n    // because this is the top-most component rendered in our app and it will very\r\n    // rarely re-render/cause a performance problem.\r\n    return (\r\n        <AuthContext.Provider value={{data, login, logout, register}} {...props} />\r\n    )\r\n}\r\nconst useAuth = () => React.useContext(AuthContext)\r\nexport {AuthProvider, useAuth}\r\n// the UserProvider in user-context.js is basically:\r\n// const UserProvider = props => (\r\n//   <UserContext.Provider value={useAuth().data.user} {...props} />\r\n// )\r\n// and the useUser hook is basically this:\r\n// const useUser = () => React.useContext(UserContext)"]},"metadata":{},"sourceType":"module"}