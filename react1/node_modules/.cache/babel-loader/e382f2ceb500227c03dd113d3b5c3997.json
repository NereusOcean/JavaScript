{"ast":null,"code":"// import * as React from 'react'\n// import {FullPageSpinner} from '../components/lib'\n//\n// const AuthContext = React.createContext()\n// function AuthProvider(props) {\n//     // code for pre-loading the user's information if we have their token in\n//     // localStorage goes here\n//     // ðŸš¨ this is the important bit.\n//     // Normally your provider components render the context provider with a value.\n//     // But we post-pone rendering any of the children until after we've determined\n//     // whether or not we have a user token and if we do, then we render a spinner\n//     // while we go retrieve that user's information.\n//     //if (weAreStillWaitingToGetTheUserData) {\n//         return <FullPageSpinner />\n//     //}\n//     const login = () => {} // make a login request\n//     const register = () => {} // register the user\n//     const logout = () => {} // clear the token in localStorage and the user data\n//     // note, I'm not bothering to optimize this `value` with React.useMemo here\n//     // because this is the top-most component rendered in our app and it will very\n//     // rarely re-render/cause a performance problem.\n//     //return (\n//       //  <AuthContext.Provider value={{data, login, logout, register}} {...props} />\n//    // )\n// }\n// const useAuth = () => React.useContext(AuthContext)\n// export {AuthProvider, useAuth}\n// // the UserProvider in user-context.js is basically:\n// // const UserProvider = props => (\n// //   <UserContext.Provider value={useAuth().data.user} {...props} />\n// // )\n// // and the useUser hook is basically this:\n// // const useUser = () => React.useContext(UserContext)","map":{"version":3,"sources":["D:/WSReact/react1/src/Tech/UserContext.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["// import * as React from 'react'\r\n// import {FullPageSpinner} from '../components/lib'\r\n//\r\n// const AuthContext = React.createContext()\r\n// function AuthProvider(props) {\r\n//     // code for pre-loading the user's information if we have their token in\r\n//     // localStorage goes here\r\n//     // ðŸš¨ this is the important bit.\r\n//     // Normally your provider components render the context provider with a value.\r\n//     // But we post-pone rendering any of the children until after we've determined\r\n//     // whether or not we have a user token and if we do, then we render a spinner\r\n//     // while we go retrieve that user's information.\r\n//     //if (weAreStillWaitingToGetTheUserData) {\r\n//         return <FullPageSpinner />\r\n//     //}\r\n//     const login = () => {} // make a login request\r\n//     const register = () => {} // register the user\r\n//     const logout = () => {} // clear the token in localStorage and the user data\r\n//     // note, I'm not bothering to optimize this `value` with React.useMemo here\r\n//     // because this is the top-most component rendered in our app and it will very\r\n//     // rarely re-render/cause a performance problem.\r\n//     //return (\r\n//       //  <AuthContext.Provider value={{data, login, logout, register}} {...props} />\r\n//    // )\r\n// }\r\n// const useAuth = () => React.useContext(AuthContext)\r\n// export {AuthProvider, useAuth}\r\n// // the UserProvider in user-context.js is basically:\r\n// // const UserProvider = props => (\r\n// //   <UserContext.Provider value={useAuth().data.user} {...props} />\r\n// // )\r\n// // and the useUser hook is basically this:\r\n// // const useUser = () => React.useContext(UserContext)"]},"metadata":{},"sourceType":"module"}